// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.AlgoStore.KubernetesClient.Models
{
    using Newtonsoft.Json;
    using System.Collections.Generic;

    /// <summary>
    /// SubjectAccessReviewSpec is a description of the access request.
    /// Exactly one of ResourceAuthorizationAttributes and
    /// NonResourceAuthorizationAttributes must be set
    /// </summary>
    public partial class Iok8skubernetespkgapisauthorizationv1SubjectAccessReviewSpec
    {
        /// <summary>
        /// Initializes a new instance of the
        /// Iok8skubernetespkgapisauthorizationv1SubjectAccessReviewSpec class.
        /// </summary>
        public Iok8skubernetespkgapisauthorizationv1SubjectAccessReviewSpec()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// Iok8skubernetespkgapisauthorizationv1SubjectAccessReviewSpec class.
        /// </summary>
        /// <param name="extra">Extra corresponds to the user.Info.GetExtra()
        /// method from the authenticator.  Since that is input to the
        /// authorizer it needs a reflection here.</param>
        /// <param name="groups">Groups is the groups you're testing
        /// for.</param>
        /// <param name="nonResourceAttributes">NonResourceAttributes describes
        /// information for a non-resource access request</param>
        /// <param name="resourceAttributes">ResourceAuthorizationAttributes
        /// describes information for a resource access request</param>
        /// <param name="user">User is the user you're testing for. If you
        /// specify "User" but not "Groups", then is it interpreted as "What if
        /// User were not a member of any groups</param>
        public Iok8skubernetespkgapisauthorizationv1SubjectAccessReviewSpec(IDictionary<string, IList<string>> extra = default(IDictionary<string, IList<string>>), IList<string> groups = default(IList<string>), Iok8skubernetespkgapisauthorizationv1NonResourceAttributes nonResourceAttributes = default(Iok8skubernetespkgapisauthorizationv1NonResourceAttributes), Iok8skubernetespkgapisauthorizationv1ResourceAttributes resourceAttributes = default(Iok8skubernetespkgapisauthorizationv1ResourceAttributes), string user = default(string))
        {
            Extra = extra;
            Groups = groups;
            NonResourceAttributes = nonResourceAttributes;
            ResourceAttributes = resourceAttributes;
            User = user;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets extra corresponds to the user.Info.GetExtra() method
        /// from the authenticator.  Since that is input to the authorizer it
        /// needs a reflection here.
        /// </summary>
        [JsonProperty(PropertyName = "extra")]
        public IDictionary<string, IList<string>> Extra { get; set; }

        /// <summary>
        /// Gets or sets groups is the groups you're testing for.
        /// </summary>
        [JsonProperty(PropertyName = "groups")]
        public IList<string> Groups { get; set; }

        /// <summary>
        /// Gets or sets nonResourceAttributes describes information for a
        /// non-resource access request
        /// </summary>
        [JsonProperty(PropertyName = "nonResourceAttributes")]
        public Iok8skubernetespkgapisauthorizationv1NonResourceAttributes NonResourceAttributes { get; set; }

        /// <summary>
        /// Gets or sets resourceAuthorizationAttributes describes information
        /// for a resource access request
        /// </summary>
        [JsonProperty(PropertyName = "resourceAttributes")]
        public Iok8skubernetespkgapisauthorizationv1ResourceAttributes ResourceAttributes { get; set; }

        /// <summary>
        /// Gets or sets user is the user you're testing for. If you specify
        /// "User" but not "Groups", then is it interpreted as "What if User
        /// were not a member of any groups
        /// </summary>
        [JsonProperty(PropertyName = "user")]
        public string User { get; set; }

    }
}
