// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.AlgoStore.DeploymentApiClient
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for FindByPrincipalAndAfterAndTypeUsingGET.
    /// </summary>
    public static partial class FindByPrincipalAndAfterAndTypeUsingGETExtensions
    {
            /// <summary>
            /// findByPrincipalAndAfterAndType
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='principal'>
            /// principal
            /// </param>
            /// <param name='after'>
            /// after
            /// </param>
            /// <param name='type'>
            /// type
            /// </param>
            public static object One(this IFindByPrincipalAndAfterAndTypeUsingGET operations, string principal = default(string), System.DateTime? after = default(System.DateTime?), string type = default(string))
            {
                return operations.OneAsync(principal, after, type).GetAwaiter().GetResult();
            }

            /// <summary>
            /// findByPrincipalAndAfterAndType
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='principal'>
            /// principal
            /// </param>
            /// <param name='after'>
            /// after
            /// </param>
            /// <param name='type'>
            /// type
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> OneAsync(this IFindByPrincipalAndAfterAndTypeUsingGET operations, string principal = default(string), System.DateTime? after = default(System.DateTime?), string type = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.OneWithHttpMessagesAsync(principal, after, type, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
