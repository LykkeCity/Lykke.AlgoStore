// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.AlgoStore.DeploymentApiClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ApiDocumentation.
    /// </summary>
    public static partial class ApiDocumentationExtensions
    {
            /// <summary>
            /// buildAlgoImageFromBinary
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='algoUserName'>
            /// algoUserName
            /// </param>
            /// <param name='algoName'>
            /// algoName
            /// </param>
            /// <param name='file'>
            /// file
            /// </param>
            public static Algo BuildAlgoImageFromBinaryUsingPOST(this IApiDocumentation operations, string algoUserName, string algoName, Stream file)
            {
                return operations.BuildAlgoImageFromBinaryUsingPOSTAsync(algoUserName, algoName, file).GetAwaiter().GetResult();
            }

            /// <summary>
            /// buildAlgoImageFromBinary
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='algoUserName'>
            /// algoUserName
            /// </param>
            /// <param name='algoName'>
            /// algoName
            /// </param>
            /// <param name='file'>
            /// file
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Algo> BuildAlgoImageFromBinaryUsingPOSTAsync(this IApiDocumentation operations, string algoUserName, string algoName, Stream file, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BuildAlgoImageFromBinaryUsingPOSTWithHttpMessagesAsync(algoUserName, algoName, file, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// buildAlgoImageFromSource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appCode'>
            /// appCode
            /// </param>
            /// <param name='algoUserName'>
            /// algoUserName
            /// </param>
            /// <param name='algoName'>
            /// algoName
            /// </param>
            public static Algo BuildAlgoImageFromSourceUsingPOST(this IApiDocumentation operations, string appCode, string algoUserName, string algoName)
            {
                return operations.BuildAlgoImageFromSourceUsingPOSTAsync(appCode, algoUserName, algoName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// buildAlgoImageFromSource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appCode'>
            /// appCode
            /// </param>
            /// <param name='algoUserName'>
            /// algoUserName
            /// </param>
            /// <param name='algoName'>
            /// algoName
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Algo> BuildAlgoImageFromSourceUsingPOSTAsync(this IApiDocumentation operations, string appCode, string algoUserName, string algoName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BuildAlgoImageFromSourceUsingPOSTWithHttpMessagesAsync(appCode, algoUserName, algoName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getAlgo
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Algo> GetAlgoUsingGET(this IApiDocumentation operations)
            {
                return operations.GetAlgoUsingGETAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// getAlgo
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Algo>> GetAlgoUsingGETAsync(this IApiDocumentation operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAlgoUsingGETWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// createAlgoService
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='algoId'>
            /// algoId
            /// </param>
            /// <param name='name'>
            /// name
            /// </param>
            public static AlgoService CreateAlgoServiceUsingPOST(this IApiDocumentation operations, long algoId, string name)
            {
                return operations.CreateAlgoServiceUsingPOSTAsync(algoId, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// createAlgoService
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='algoId'>
            /// algoId
            /// </param>
            /// <param name='name'>
            /// name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AlgoService> CreateAlgoServiceUsingPOSTAsync(this IApiDocumentation operations, long algoId, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAlgoServiceUsingPOSTWithHttpMessagesAsync(algoId, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<AlgoService> GetUsingGET(this IApiDocumentation operations)
            {
                return operations.GetUsingGETAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<AlgoService>> GetUsingGETAsync(this IApiDocumentation operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUsingGETWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// deleteAlgoService
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            public static void DeleteAlgoServiceUsingDELETE(this IApiDocumentation operations, long id)
            {
                operations.DeleteAlgoServiceUsingDELETEAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// deleteAlgoService
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAlgoServiceUsingDELETEAsync(this IApiDocumentation operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteAlgoServiceUsingDELETEWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// getAlgoServiceStatus
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            public static string GetAlgoServiceStatusUsingGET(this IApiDocumentation operations, long id)
            {
                return operations.GetAlgoServiceStatusUsingGETAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getAlgoServiceStatus
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetAlgoServiceStatusUsingGETAsync(this IApiDocumentation operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAlgoServiceStatusUsingGETWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// updateAlgoService
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='buildId'>
            /// buildId
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            public static void UpdateAlgoServiceUsingPOST(this IApiDocumentation operations, long buildId, long id)
            {
                operations.UpdateAlgoServiceUsingPOSTAsync(buildId, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// updateAlgoService
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='buildId'>
            /// buildId
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateAlgoServiceUsingPOSTAsync(this IApiDocumentation operations, long buildId, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateAlgoServiceUsingPOSTWithHttpMessagesAsync(buildId, id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// testAlgo
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='algoId'>
            /// algoId
            /// </param>
            /// <param name='name'>
            /// name
            /// </param>
            public static AlgoTest TestAlgoUsingPOST(this IApiDocumentation operations, long algoId, string name)
            {
                return operations.TestAlgoUsingPOSTAsync(algoId, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// testAlgo
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='algoId'>
            /// algoId
            /// </param>
            /// <param name='name'>
            /// name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AlgoTest> TestAlgoUsingPOSTAsync(this IApiDocumentation operations, long algoId, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TestAlgoUsingPOSTWithHttpMessagesAsync(algoId, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getAll
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<AlgoTest> GetAllUsingGET(this IApiDocumentation operations)
            {
                return operations.GetAllUsingGETAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// getAll
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<AlgoTest>> GetAllUsingGETAsync(this IApiDocumentation operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllUsingGETWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// deleteTestAlgo
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            public static void DeleteTestAlgoUsingDELETE(this IApiDocumentation operations, long id)
            {
                operations.DeleteTestAlgoUsingDELETEAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// deleteTestAlgo
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteTestAlgoUsingDELETEAsync(this IApiDocumentation operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteTestAlgoUsingDELETEWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// getAdministrativeStatus
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            public static AdminStatusResponse GetAdministrativeStatusUsingGET(this IApiDocumentation operations, long id)
            {
                return operations.GetAdministrativeStatusUsingGETAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getAdministrativeStatus
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AdminStatusResponse> GetAdministrativeStatusUsingGETAsync(this IApiDocumentation operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAdministrativeStatusUsingGETWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getAlgoLog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            public static LogResponse GetAlgoLogUsingGET(this IApiDocumentation operations, long id)
            {
                return operations.GetAlgoLogUsingGETAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getAlgoLog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LogResponse> GetAlgoLogUsingGETAsync(this IApiDocumentation operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAlgoLogUsingGETWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getOperationalStatus
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            public static OperationalStatusResponse GetOperationalStatusUsingGET(this IApiDocumentation operations, long id)
            {
                return operations.GetOperationalStatusUsingGETAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getOperationalStatus
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationalStatusResponse> GetOperationalStatusUsingGETAsync(this IApiDocumentation operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOperationalStatusUsingGETWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getTailLog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            /// <param name='tail'>
            /// tail
            /// </param>
            public static LogResponse GetTailLogUsingGET(this IApiDocumentation operations, long id, int tail)
            {
                return operations.GetTailLogUsingGETAsync(id, tail).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getTailLog
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            /// <param name='tail'>
            /// tail
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LogResponse> GetTailLogUsingGETAsync(this IApiDocumentation operations, long id, int tail, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTailLogUsingGETWithHttpMessagesAsync(id, tail, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// pauseTestAlgo
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            public static void PauseTestAlgoUsingPUT(this IApiDocumentation operations, long id)
            {
                operations.PauseTestAlgoUsingPUTAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// pauseTestAlgo
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PauseTestAlgoUsingPUTAsync(this IApiDocumentation operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PauseTestAlgoUsingPUTWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// resumeTestAlgo
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            public static void ResumeTestAlgoUsingPUT(this IApiDocumentation operations, long id)
            {
                operations.ResumeTestAlgoUsingPUTAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// resumeTestAlgo
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ResumeTestAlgoUsingPUTAsync(this IApiDocumentation operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ResumeTestAlgoUsingPUTWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// start
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            public static void StartUsingPUT(this IApiDocumentation operations, long id)
            {
                operations.StartUsingPUTAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// start
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StartUsingPUTAsync(this IApiDocumentation operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StartUsingPUTWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// stopTestAlgo
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            public static void StopTestAlgoUsingPUT(this IApiDocumentation operations, long id)
            {
                operations.StopTestAlgoUsingPUTAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// stopTestAlgo
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StopTestAlgoUsingPUTAsync(this IApiDocumentation operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StopTestAlgoUsingPUTWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// removeALgo
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            public static void RemoveALgoUsingDELETE(this IApiDocumentation operations, long id)
            {
                operations.RemoveALgoUsingDELETEAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// removeALgo
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveALgoUsingDELETEAsync(this IApiDocumentation operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveALgoUsingDELETEWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// error
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, object> ErrorUsingGET(this IApiDocumentation operations)
            {
                return operations.ErrorUsingGETAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// error
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, object>> ErrorUsingGETAsync(this IApiDocumentation operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ErrorUsingGETWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// error
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, object> ErrorUsingHEAD(this IApiDocumentation operations)
            {
                return operations.ErrorUsingHEADAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// error
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, object>> ErrorUsingHEADAsync(this IApiDocumentation operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ErrorUsingHEADWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// error
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, object> ErrorUsingPOST(this IApiDocumentation operations)
            {
                return operations.ErrorUsingPOSTAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// error
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, object>> ErrorUsingPOSTAsync(this IApiDocumentation operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ErrorUsingPOSTWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// error
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, object> ErrorUsingPUT(this IApiDocumentation operations)
            {
                return operations.ErrorUsingPUTAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// error
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, object>> ErrorUsingPUTAsync(this IApiDocumentation operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ErrorUsingPUTWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// error
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, object> ErrorUsingDELETE(this IApiDocumentation operations)
            {
                return operations.ErrorUsingDELETEAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// error
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, object>> ErrorUsingDELETEAsync(this IApiDocumentation operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ErrorUsingDELETEWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// error
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, object> ErrorUsingPATCH(this IApiDocumentation operations)
            {
                return operations.ErrorUsingPATCHAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// error
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, object>> ErrorUsingPATCHAsync(this IApiDocumentation operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ErrorUsingPATCHWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
