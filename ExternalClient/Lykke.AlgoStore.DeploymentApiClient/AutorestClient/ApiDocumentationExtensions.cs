// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.AlgoStore.DeploymentApiClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ApiDocumentation.
    /// </summary>
    public static partial class ApiDocumentationExtensions
    {
            /// <summary>
            /// links
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ResourceSupport LinksUsingGET(this IApiDocumentation operations)
            {
                return operations.LinksUsingGETAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// links
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceSupport> LinksUsingGETAsync(this IApiDocumentation operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LinksUsingGETWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// buildAlgoImageFromBinary
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='file'>
            /// file
            /// </param>
            /// <param name='algoUserName'>
            /// algoUserName
            /// </param>
            /// <param name='algoName'>
            /// algoName
            /// </param>
            public static Algo BuildAlgoImageFromBinaryUsingPOST(this IApiDocumentation operations, Stream file, string algoUserName, string algoName)
            {
                return operations.BuildAlgoImageFromBinaryUsingPOSTAsync(file, algoUserName, algoName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// buildAlgoImageFromBinary
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='file'>
            /// file
            /// </param>
            /// <param name='algoUserName'>
            /// algoUserName
            /// </param>
            /// <param name='algoName'>
            /// algoName
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Algo> BuildAlgoImageFromBinaryUsingPOSTAsync(this IApiDocumentation operations, Stream file, string algoUserName, string algoName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BuildAlgoImageFromBinaryUsingPOSTWithHttpMessagesAsync(file, algoUserName, algoName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// buildAlgoImageFromSource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appCode'>
            /// appCode
            /// </param>
            /// <param name='algoUserName'>
            /// algoUserName
            /// </param>
            /// <param name='algoName'>
            /// algoName
            /// </param>
            public static Algo BuildAlgoImageFromSourceUsingPOST(this IApiDocumentation operations, string appCode, string algoUserName, string algoName)
            {
                return operations.BuildAlgoImageFromSourceUsingPOSTAsync(appCode, algoUserName, algoName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// buildAlgoImageFromSource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appCode'>
            /// appCode
            /// </param>
            /// <param name='algoUserName'>
            /// algoUserName
            /// </param>
            /// <param name='algoName'>
            /// algoName
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Algo> BuildAlgoImageFromSourceUsingPOSTAsync(this IApiDocumentation operations, string appCode, string algoUserName, string algoName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BuildAlgoImageFromSourceUsingPOSTWithHttpMessagesAsync(appCode, algoUserName, algoName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getAlgo
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Algo> GetAlgoUsingGET(this IApiDocumentation operations)
            {
                return operations.GetAlgoUsingGETAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// getAlgo
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Algo>> GetAlgoUsingGETAsync(this IApiDocumentation operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAlgoUsingGETWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// createAlgoService
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='algoId'>
            /// algoId
            /// </param>
            /// <param name='name'>
            /// name
            /// </param>
            public static AlgoService CreateAlgoServiceUsingPUT(this IApiDocumentation operations, long algoId, string name)
            {
                return operations.CreateAlgoServiceUsingPUTAsync(algoId, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// createAlgoService
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='algoId'>
            /// algoId
            /// </param>
            /// <param name='name'>
            /// name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AlgoService> CreateAlgoServiceUsingPUTAsync(this IApiDocumentation operations, long algoId, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAlgoServiceUsingPUTWithHttpMessagesAsync(algoId, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<AlgoService> GetUsingGET(this IApiDocumentation operations)
            {
                return operations.GetUsingGETAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<AlgoService>> GetUsingGETAsync(this IApiDocumentation operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUsingGETWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// deleteAlgoService
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            public static void DeleteAlgoServiceUsingDELETE(this IApiDocumentation operations, long id)
            {
                operations.DeleteAlgoServiceUsingDELETEAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// deleteAlgoService
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAlgoServiceUsingDELETEAsync(this IApiDocumentation operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteAlgoServiceUsingDELETEWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// getAlgoServiceStatus
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            public static string GetAlgoServiceStatusUsingGET(this IApiDocumentation operations, long id)
            {
                return operations.GetAlgoServiceStatusUsingGETAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getAlgoServiceStatus
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetAlgoServiceStatusUsingGETAsync(this IApiDocumentation operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAlgoServiceStatusUsingGETWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// updateAlgoService
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='buildId'>
            /// buildId
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            public static void UpdateAlgoServiceUsingPOST(this IApiDocumentation operations, long buildId, long id)
            {
                operations.UpdateAlgoServiceUsingPOSTAsync(buildId, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// updateAlgoService
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='buildId'>
            /// buildId
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateAlgoServiceUsingPOSTAsync(this IApiDocumentation operations, long buildId, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateAlgoServiceUsingPOSTWithHttpMessagesAsync(buildId, id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// testAlgo
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='algoId'>
            /// algoId
            /// </param>
            /// <param name='name'>
            /// name
            /// </param>
            public static AlgoTest TestAlgoUsingPUT(this IApiDocumentation operations, long algoId, string name)
            {
                return operations.TestAlgoUsingPUTAsync(algoId, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// testAlgo
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='algoId'>
            /// algoId
            /// </param>
            /// <param name='name'>
            /// name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AlgoTest> TestAlgoUsingPUTAsync(this IApiDocumentation operations, long algoId, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TestAlgoUsingPUTWithHttpMessagesAsync(algoId, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// getAll
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<AlgoTest> GetAllUsingGET(this IApiDocumentation operations)
            {
                return operations.GetAllUsingGETAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// getAll
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<AlgoTest>> GetAllUsingGETAsync(this IApiDocumentation operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllUsingGETWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// deleteTestAlgo
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            public static void DeleteTestAlgoUsingDELETE(this IApiDocumentation operations, long id)
            {
                operations.DeleteTestAlgoUsingDELETEAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// deleteTestAlgo
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteTestAlgoUsingDELETEAsync(this IApiDocumentation operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteTestAlgoUsingDELETEWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// pauseTestAlgo
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            public static void PauseTestAlgoUsingPUT(this IApiDocumentation operations, long id)
            {
                operations.PauseTestAlgoUsingPUTAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// pauseTestAlgo
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PauseTestAlgoUsingPUTAsync(this IApiDocumentation operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PauseTestAlgoUsingPUTWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// resumeTestAlgo
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            public static void ResumeTestAlgoUsingPUT(this IApiDocumentation operations, long id)
            {
                operations.ResumeTestAlgoUsingPUTAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// resumeTestAlgo
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ResumeTestAlgoUsingPUTAsync(this IApiDocumentation operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ResumeTestAlgoUsingPUTWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// start
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            public static void StartUsingPUT(this IApiDocumentation operations, long id)
            {
                operations.StartUsingPUTAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// start
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StartUsingPUTAsync(this IApiDocumentation operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StartUsingPUTWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// getTestAlgoStatus
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            public static string GetTestAlgoStatusUsingGET(this IApiDocumentation operations, long id)
            {
                return operations.GetTestAlgoStatusUsingGETAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// getTestAlgoStatus
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetTestAlgoStatusUsingGETAsync(this IApiDocumentation operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTestAlgoStatusUsingGETWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// stopTestAlgo
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            public static void StopTestAlgoUsingPUT(this IApiDocumentation operations, long id)
            {
                operations.StopTestAlgoUsingPUTAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// stopTestAlgo
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StopTestAlgoUsingPUTAsync(this IApiDocumentation operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StopTestAlgoUsingPUTWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// removeALgo
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            public static void RemoveALgoUsingDELETE(this IApiDocumentation operations, long id)
            {
                operations.RemoveALgoUsingDELETEAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// removeALgo
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveALgoUsingDELETEAsync(this IApiDocumentation operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveALgoUsingDELETEWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// findByPrincipalAndAfterAndType
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='principal'>
            /// principal
            /// </param>
            /// <param name='after'>
            /// after
            /// </param>
            /// <param name='type'>
            /// type
            /// </param>
            public static object FindByPrincipalAndAfterAndTypeUsingGET(this IApiDocumentation operations, string principal = default(string), System.DateTime? after = default(System.DateTime?), string type = default(string))
            {
                return operations.FindByPrincipalAndAfterAndTypeUsingGETAsync(principal, after, type).GetAwaiter().GetResult();
            }

            /// <summary>
            /// findByPrincipalAndAfterAndType
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='principal'>
            /// principal
            /// </param>
            /// <param name='after'>
            /// after
            /// </param>
            /// <param name='type'>
            /// type
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> FindByPrincipalAndAfterAndTypeUsingGETAsync(this IApiDocumentation operations, string principal = default(string), System.DateTime? after = default(System.DateTime?), string type = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FindByPrincipalAndAfterAndTypeUsingGETWithHttpMessagesAsync(principal, after, type, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// invoke
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object InvokeUsingGET(this IApiDocumentation operations)
            {
                return operations.InvokeUsingGETAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// invoke
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> InvokeUsingGETAsync(this IApiDocumentation operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InvokeUsingGETWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name
            /// </param>
            public static object ValueUsingGET(this IApiDocumentation operations, string name)
            {
                return operations.ValueUsingGETAsync(name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ValueUsingGETAsync(this IApiDocumentation operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ValueUsingGETWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// error
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, object> ErrorUsingGET(this IApiDocumentation operations)
            {
                return operations.ErrorUsingGETAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// error
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, object>> ErrorUsingGETAsync(this IApiDocumentation operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ErrorUsingGETWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// error
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, object> ErrorUsingHEAD(this IApiDocumentation operations)
            {
                return operations.ErrorUsingHEADAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// error
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, object>> ErrorUsingHEADAsync(this IApiDocumentation operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ErrorUsingHEADWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// error
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, object> ErrorUsingPOST(this IApiDocumentation operations)
            {
                return operations.ErrorUsingPOSTAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// error
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, object>> ErrorUsingPOSTAsync(this IApiDocumentation operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ErrorUsingPOSTWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// error
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, object> ErrorUsingPUT(this IApiDocumentation operations)
            {
                return operations.ErrorUsingPUTAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// error
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, object>> ErrorUsingPUTAsync(this IApiDocumentation operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ErrorUsingPUTWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// error
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, object> ErrorUsingDELETE(this IApiDocumentation operations)
            {
                return operations.ErrorUsingDELETEAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// error
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, object>> ErrorUsingDELETEAsync(this IApiDocumentation operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ErrorUsingDELETEWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// error
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, object> ErrorUsingPATCH(this IApiDocumentation operations)
            {
                return operations.ErrorUsingPATCHAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// error
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, object>> ErrorUsingPATCHAsync(this IApiDocumentation operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ErrorUsingPATCHWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// invoke
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void InvokeUsingHEAD(this IApiDocumentation operations)
            {
                operations.InvokeUsingHEADAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// invoke
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task InvokeUsingHEADAsync(this IApiDocumentation operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.InvokeUsingHEADWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// set
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name
            /// </param>
            /// <param name='configuration'>
            /// configuration
            /// </param>
            public static object SetUsingPOST(this IApiDocumentation operations, string name, IDictionary<string, string> configuration)
            {
                return operations.SetUsingPOSTAsync(name, configuration).GetAwaiter().GetResult();
            }

            /// <summary>
            /// set
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name
            /// </param>
            /// <param name='configuration'>
            /// configuration
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SetUsingPOSTAsync(this IApiDocumentation operations, string name, IDictionary<string, string> configuration, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetUsingPOSTWithHttpMessagesAsync(name, configuration, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
